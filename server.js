// Generated by LiveScript 1.5.0
(function(){
  var Ledger, express, bodyParser, PORT, ledger, parseCommodity, parseInfo, parsePosting, parseTransaction, x$;
  Ledger = require('ledger-cli').Ledger;
  express = require('express');
  bodyParser = require('body-parser');
  PORT = process.env.PORT || 8080;
  ledger = new Ledger({
    binary: '/usr/bin/ledger',
    file: '/home/amar/src/qif2ledger/ledger.dat'
  });
  parseCommodity = function(it){
    var value, currency;
    value = it.trim().replace(/[^\d.-]/, '');
    currency = it.replace(value, '').trim();
    return {
      currency: currency,
      value: parseFloat(value)
    };
  };
  parseInfo = function(it){
    return it;
  };
  parsePosting = function(it){
    var parts, posting;
    parts = it.trim().split(/(?:\t|[ ]{2,})+/);
    posting = {};
    if (parts.length < 2) {
      return {
        account: parts[0]
      };
    } else {
      return {
        account: parts[0],
        commodity: parseCommodity(parts[1])
      };
    }
  };
  parseTransaction = function(it){
    var lines, info, postings, sum, without, i$, len$, posting, key$, currency, value;
    lines = it.split('\n');
    info = lines.shift();
    postings = [];
    sum = {};
    without = null;
    for (i$ = 0, len$ = lines.length; i$ < len$; ++i$) {
      posting = lines[i$];
      posting = parsePosting(posting);
      if (posting.commodity == null) {
        if (without != null) {
          throw new Error("Transaction with postings with empty values: " + info);
        }
        without = posting;
        continue;
      }
      sum[key$ = posting.commodity.currency] || (sum[key$] = 0);
      sum[posting.commodity.currency] += posting.commodity.value;
      postings.push(posting);
    }
    if (without != null) {
      for (currency in sum) {
        value = sum[currency];
        postings.push({
          account: without.account,
          commodity: {
            currency: currency,
            value: -value
          }
        });
      }
    }
    return {
      info: info,
      postings: postings
    };
  };
  x$ = express();
  x$.use(express['static']('www'));
  x$.use(bodyParser.urlencoded({
    extended: false,
    strict: false
  }));
  x$.use(function(req, res, next){
    res.header('Content-Type', 'application/json');
    next();
  });
  x$.get('/accounts', function(req, res){
    var accounts, x$;
    accounts = [];
    x$ = ledger.accounts();
    x$.on('data', function(it){
      accounts.push(it);
    });
    x$.on('end', function(){
      res.send(
      JSON.stringify(
      accounts));
    });
  });
  x$.get('/transactions', function(req, res){
    var transactions, x$;
    transactions = [];
    x$ = ledger.print();
    x$.on('data', function(){
      var buffer;
      buffer = '';
      return function(it){
        buffer += it;
        while (~buffer.indexOf('\n\n')) {
          buffer = buffer.split('\n\n');
          transactions.push(parseTransaction(buffer.shift()));
          buffer = buffer.join('\n\n');
        }
      };
    }());
    x$.on('end', function(){
      res.send(
      JSON.stringify(
      transactions));
    });
  });
  x$.listen(PORT);
}).call(this);
